#!/usr/bin/env python
# -*- coding: utf-8 -*-

from {{package}}.constants import *

import gevent.monkey; gevent.monkey.patch_all()

import gunicorn.app.base
from gunicorn.six import iteritems
import mongoengine
import re

import argparse
import sys
import uwsgi
import logging

from {{package}} import cfg
from {{package}} import util
from {{package}} import wsgi
from {{package}} import settings

application = None


class App(gunicorn.app.base.BaseApplication):
    def __init__(self, options=None):
        self.options = options or {}
        self.application = wsgi.application
        super(App, self).__init__()

    def load_config(self):
        config = dict([(key, value) for key, value in iteritems(self.options)
                       if key in self.cfg.settings and value is not None and value.__class__.__name__ == 'str'])
        for key, value in iteritems(config):
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


def parse_args():
    ''' '''
    parser = argparse.ArgumentParser(description='{{package}}')
    parser.add_argument('-i', '--ini', type=str, required=True, help="ini filename")
    parser.add_argument('-p', '--port', type=str, required=True, help="port")
    parser.add_argument('-r', '--reload', type=bool, required=False, default=False, help="port")
    parser.add_argument('-e', '--error_log', type=str, required=False, default='', help="error log")
    parser.add_argument('-a', '--access_log', type=str, required=False, default='', help="access log")

    args = parser.parse_args()

    return (S_OK, args)


def _init_ini_file(ini_filename):
    section = '{{package}}:django'

    django_settings = cfg.init_ini_file(ini_filename, section)

    for (key, val) in django_settings.iteritems():
        key = key.upper()
        cfg.logger.warning('to set django_settings: key: %s val: %s', key, val)
        setattr(settings, key, val)


def _main():
    global application

    opt = uwsgi.opt

    port = opt.get('port', '')
    error_log = opt.get('error_log', '') or 'log.%s.err.txt' % (port)
    access_log = opt.get('access_log', '') or 'log.%s.access.txt' % (port)
    the_reload = opt.get('reload', False)
    ini_filename = opt.get('ini', '')

    cfg.init({'ini_filename': ini_filename, 'bind': '0.0.0.0:%s' % (port), 'worker_class': 'gevent', 'worker_connections': 10, 'reload': the_reload, 'errorlog': error_log, 'accesslog': access_log})

    _init_ini_file(ini_filename)

    (mongo_host, mongo_port) = util.deserialize_host_port(cfg.config.get('mongo_server_hostname', 'localhost'), default_port=27017)

    mongoengine.connect('{{package}}', host=mongo_host, port=mongo_port, use_greenlets=True)

    wsgi.init_django_settings_module('{{package}}.settings')
    wsgi.init_application()

    application = wsgi.application

_main()
